buildscript {
    

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        jcenter()
        google()
    }
    dependencies {
        classpath "com.badlogicgames.gdx:gdx-tools:1.9.10"
    }
}

allprojects {

    version = '0.1.0'
    ext {
        appName = "Robogeddon"
        gdxVersion = '1.9.10'
        roboVMVersion = '2.3.8'
        box2DLightsVersion = '1.4'
        ashleyVersion = '1.7.0'
        aiVersion = '1.8.0'
        jacksonVersion = '2.8.11.6'
        texturePacker = ["client/raw_sprites", "client/assets", "sprites"]
        shapeDrawerVersion = '2.2.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://oss.sonatype.org/content/repositories/releases/" }
        maven { url 'https://jitpack.io' }
    }
}

project(":client") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
        api "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"
        api "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        api "com.badlogicgames.gdx:gdx-freetype:$gdxVersion"
        api "space.earlygrey:shapedrawer:$shapeDrawerVersion"
    }
}

project(":server") {
    apply plugin: "java-library"


    dependencies {
        implementation project(":core")
    }
}

project(":core") {
    apply plugin: "java-library"


    dependencies {
        implementation 'com.google.code.gson:gson:2.8.6'
        api "com.badlogicgames.gdx:gdx:$gdxVersion"
        implementation "space.earlygrey:shapedrawer:$shapeDrawerVersion"
    }
}


import com.badlogic.gdx.tools.texturepacker.TexturePacker

task packSprites {
    doLast {
        def input = (String) texturePacker[0];
        def output = (String) texturePacker[1];
        def output_name = (String) texturePacker[2];

        TexturePacker.process(input, output, output_name)
    }
}